{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Clasificaci\u00f3n de productos nuevos o usados En el contexto de MercadoLibre Marketplace un algoritmo es necesario para predecir si un producto es nuevo y usado Objetivo Predecir si un producto es nuevo o usado en datos tomados por mercado libre en el a\u00f1o 2015 para datos de Argentina Metodolog\u00eda Se dise\u00f1o un patron de dise\u00f1o de tipo pipeline y se procedio a entrenar los siguientes modelos: Logistic Regression Random Forest Gradient Boosting XGBoost LightGBM Finalmente se realiz\u00f3 una optimizaci\u00f3n de hiperparametros y se export\u00f3 el modelo.","title":"Home"},{"location":"#clasificacion-de-productos-nuevos-o-usados","text":"En el contexto de MercadoLibre Marketplace un algoritmo es necesario para predecir si un producto es nuevo y usado","title":"Clasificaci\u00f3n de productos nuevos o usados"},{"location":"#objetivo","text":"Predecir si un producto es nuevo o usado en datos tomados por mercado libre en el a\u00f1o 2015 para datos de Argentina","title":"Objetivo"},{"location":"#metodologia","text":"Se dise\u00f1o un patron de dise\u00f1o de tipo pipeline y se procedio a entrenar los siguientes modelos: Logistic Regression Random Forest Gradient Boosting XGBoost LightGBM Finalmente se realiz\u00f3 una optimizaci\u00f3n de hiperparametros y se export\u00f3 el modelo.","title":"Metodolog\u00eda"},{"location":"conclusiones/","text":"Conclusiones Se evidencia en general que el precio de los productos usados es m\u00e1s bajo que el de los productos nuevos; y presentan una cantidad inicial menor que los usados; por lo tanto, estas dos variables deben ser incluidas dentro de cualquier modelo que prediga si un producto es nuevo o usado. Las variables m\u00e1s significativa para el modelo fueron listing_type con la opci\u00f3n free, seguido de initial_quantity y available_quantity. Se recomienda escoger el modelo XGBoost y continuar probando mejores variables e ir iterarando en los datos en el tiempo.","title":"Conclusiones"},{"location":"conclusiones/#conclusiones","text":"Se evidencia en general que el precio de los productos usados es m\u00e1s bajo que el de los productos nuevos; y presentan una cantidad inicial menor que los usados; por lo tanto, estas dos variables deben ser incluidas dentro de cualquier modelo que prediga si un producto es nuevo o usado. Las variables m\u00e1s significativa para el modelo fueron listing_type con la opci\u00f3n free, seguido de initial_quantity y available_quantity. Se recomienda escoger el modelo XGBoost y continuar probando mejores variables e ir iterarando en los datos en el tiempo.","title":"Conclusiones"},{"location":"eda/","text":"Exploraci\u00f3n de Datos (EDA) Realizar un an\u00e1lisis exploratorio se usa con el objetivo de lograr un entendimiento m\u00e1s amplio del conjunto de datos, y al final se afianzar\u00e1n los conocimientos detr\u00e1s de la l\u00f3gica del negocio; y visto de un punto de vista m\u00e1s t\u00e9cnico ayudar\u00e1 tambi\u00e9n en la limpieza y la construcci\u00f3n del modelo. Para el siguiente an\u00e1lisis exploratorio se tuvieron en cuenta las siguientes variables: Condition (Variable objetivo): , indica si el producto es nuevo o usado) Price: precio del producto Listing_type_id: Tipo de publicaci\u00f3n para los art\u00edculos; toma los valores de free, silver, bronce, gold, gold_special, gold_premium y gold_pro Automatic_relist: Reventa autom\u00e1tica, toma los valores de 0 y 1 Status: Estado de la publicaci\u00f3n, toma los valores: active, paused y closed Available_quantity: Cantidad disponible Initial_quantity: cantidad inicial Sold_quantity: cantidad vendida Count_seller_id: cantidad de articulos vendidos por cada seller_id An\u00e1lisis descriptivo Variable objetivo Para entender la distribucion de productos nuevos y usados se tiene que el 53% (53.755) de los productos son nuevos. General Realizar un an\u00e1lisis descriptivo es lo inicial que se recomendar\u00eda realizar para entender a primera vista la districi\u00f3n de las variables n\u00famericas. Para este an\u00e1lisis usar el m\u00e9todo descriptivas() de la clase EDA; que se encuentra en el modulo eda.py instanciaEDA.descriptivas() price initial_quantity sold_quantity available_quantity count 99987.0 99987.000000 99987.000000 99987.000000 mean 5094.341 34.997610 2.397302 34.746587 std 46069.000 419.922783 42.687843 419.654162 min 0.84 1.000000 0.000000 1.000000 25% 90.0 1.000000 0.000000 1.000000 50% 250.0 1.000000 0.000000 1.000000 75% 800.0 2.000000 0.000000 2.000000 max 3956000.0 9999.000000 8676.000000 9999.000000 Agrupado Debido a que nuestra variable objetivo es codici\u00f3n debemos de realizar un an\u00e1lisis con respecto a esta variable: Precio condition price Q1 price Mediana price Promedio price Desviaci\u00f3n price Q3 new 140.0 350.0 3229.513445 38653.606948 999.0 used 65.0 150.0 7262.617919 53330.463953 550.0 Se evidencia en general que el precio de los productos usados es mas bajo que el de los productos nuevos; aunque la media en los usados es mucho mas alta (7.262) esto es gracias a la alta dispersi\u00f3n de los datos; y para estos casos es mejor interpretar la mediana. El 50% de los productos usados tiene un costo de hasta 150 , mientras que en los productos nuevos el 50% es hasta de 140 . Cantidad Inicial condition initial_quantity Q1 initial_quantity Mediana initial_quantity Promedio initial_quantity Desviaci\u00f3n initial_quantity Q3 new 1.0 2.0 63.555632 570.486538 10.0 used 1.0 1.0 1.792546 30.043514 1.0 El 50% de los productos nuevos se inician con hasta 2 productos, y en promedio la cantidad de productos con los que se inicia es 63.5 . El 50% de los productos usados se inician con hasta 1 producto, y en promedio la cantidad de productos con los que se inicia es 1.7 .","title":"EDA"},{"location":"eda/#exploracion-de-datos-eda","text":"Realizar un an\u00e1lisis exploratorio se usa con el objetivo de lograr un entendimiento m\u00e1s amplio del conjunto de datos, y al final se afianzar\u00e1n los conocimientos detr\u00e1s de la l\u00f3gica del negocio; y visto de un punto de vista m\u00e1s t\u00e9cnico ayudar\u00e1 tambi\u00e9n en la limpieza y la construcci\u00f3n del modelo. Para el siguiente an\u00e1lisis exploratorio se tuvieron en cuenta las siguientes variables: Condition (Variable objetivo): , indica si el producto es nuevo o usado) Price: precio del producto Listing_type_id: Tipo de publicaci\u00f3n para los art\u00edculos; toma los valores de free, silver, bronce, gold, gold_special, gold_premium y gold_pro Automatic_relist: Reventa autom\u00e1tica, toma los valores de 0 y 1 Status: Estado de la publicaci\u00f3n, toma los valores: active, paused y closed Available_quantity: Cantidad disponible Initial_quantity: cantidad inicial Sold_quantity: cantidad vendida Count_seller_id: cantidad de articulos vendidos por cada seller_id","title":"Exploraci\u00f3n de Datos (EDA)"},{"location":"eda/#analisis-descriptivo","text":"","title":"An\u00e1lisis descriptivo"},{"location":"eda/#variable-objetivo","text":"Para entender la distribucion de productos nuevos y usados se tiene que el 53% (53.755) de los productos son nuevos.","title":"Variable objetivo"},{"location":"eda/#general","text":"Realizar un an\u00e1lisis descriptivo es lo inicial que se recomendar\u00eda realizar para entender a primera vista la districi\u00f3n de las variables n\u00famericas. Para este an\u00e1lisis usar el m\u00e9todo descriptivas() de la clase EDA; que se encuentra en el modulo eda.py instanciaEDA.descriptivas() price initial_quantity sold_quantity available_quantity count 99987.0 99987.000000 99987.000000 99987.000000 mean 5094.341 34.997610 2.397302 34.746587 std 46069.000 419.922783 42.687843 419.654162 min 0.84 1.000000 0.000000 1.000000 25% 90.0 1.000000 0.000000 1.000000 50% 250.0 1.000000 0.000000 1.000000 75% 800.0 2.000000 0.000000 2.000000 max 3956000.0 9999.000000 8676.000000 9999.000000","title":"General"},{"location":"eda/#agrupado","text":"Debido a que nuestra variable objetivo es codici\u00f3n debemos de realizar un an\u00e1lisis con respecto a esta variable:","title":"Agrupado"},{"location":"eda/#precio","text":"condition price Q1 price Mediana price Promedio price Desviaci\u00f3n price Q3 new 140.0 350.0 3229.513445 38653.606948 999.0 used 65.0 150.0 7262.617919 53330.463953 550.0 Se evidencia en general que el precio de los productos usados es mas bajo que el de los productos nuevos; aunque la media en los usados es mucho mas alta (7.262) esto es gracias a la alta dispersi\u00f3n de los datos; y para estos casos es mejor interpretar la mediana. El 50% de los productos usados tiene un costo de hasta 150 , mientras que en los productos nuevos el 50% es hasta de 140 .","title":"Precio"},{"location":"eda/#cantidad-inicial","text":"condition initial_quantity Q1 initial_quantity Mediana initial_quantity Promedio initial_quantity Desviaci\u00f3n initial_quantity Q3 new 1.0 2.0 63.555632 570.486538 10.0 used 1.0 1.0 1.792546 30.043514 1.0 El 50% de los productos nuevos se inician con hasta 2 productos, y en promedio la cantidad de productos con los que se inicia es 63.5 . El 50% de los productos usados se inician con hasta 1 producto, y en promedio la cantidad de productos con los que se inicia es 1.7 .","title":"Cantidad Inicial"},{"location":"features/","text":"Variables a incluir Las variables que se seleccionaron para entrar en el modelo debido a que tuvieron mejor desarrollo en el an\u00e1lisis exploratorio y las pruebas fueron las siguientes: condition listing_type_id_final initial_quantity sold_quantity available_quantity sold_ratio = sold_quantity/initial_quantity price_log = log(price) count_seller_id Modelos Para realizar la predicci\u00f3n de si un producto es nuevo o usado se usaron los siguientes modelos para el entrenamiento: Logistic Regression Random Forest Gradient Boosting XGBoost LightGBM En la etapa de entrenamiento el que mejor desempe\u00f1o obtuvo fue el modelo XGBoost con un accuracy de 0.8569 Ajuste de hiperpar\u00e1metros Dado a que el mejor modelo en el entrenamiento fue XGBoost se procedi\u00f3 a realizar optimizaci\u00f3n de hiperpar\u00e1metros por medio de la validaci\u00f3n cruzada de busqueda aleatorio (RandomizedSearchCV), aunque el accuracy se mantuvo constante en la optimizaci\u00f3n. El mejor modelo fue guardado en la carpeta models.","title":"Features y Modelado"},{"location":"features/#variables-a-incluir","text":"Las variables que se seleccionaron para entrar en el modelo debido a que tuvieron mejor desarrollo en el an\u00e1lisis exploratorio y las pruebas fueron las siguientes: condition listing_type_id_final initial_quantity sold_quantity available_quantity sold_ratio = sold_quantity/initial_quantity price_log = log(price) count_seller_id","title":"Variables a incluir"},{"location":"features/#modelos","text":"Para realizar la predicci\u00f3n de si un producto es nuevo o usado se usaron los siguientes modelos para el entrenamiento: Logistic Regression Random Forest Gradient Boosting XGBoost LightGBM En la etapa de entrenamiento el que mejor desempe\u00f1o obtuvo fue el modelo XGBoost con un accuracy de 0.8569","title":"Modelos"},{"location":"features/#ajuste-de-hiperparametros","text":"Dado a que el mejor modelo en el entrenamiento fue XGBoost se procedi\u00f3 a realizar optimizaci\u00f3n de hiperpar\u00e1metros por medio de la validaci\u00f3n cruzada de busqueda aleatorio (RandomizedSearchCV), aunque el accuracy se mantuvo constante en la optimizaci\u00f3n. El mejor modelo fue guardado en la carpeta models.","title":"Ajuste de hiperpar\u00e1metros"},{"location":"metricas/","text":"Metricas M\u00e9trica inicial Accuracy Para el desarrollo del ejercicio se propuso trabajar con el Accuracy y alcanzar un minimo de 0.86. Las siguientes fueron las m\u00e9tricas calculadas con los modelos iniciales Modelo Accuracy Precision Error tipo 1 Logistic Regression 0.7864 0.754514 0.245486 Random Forest 0.8467 0.878444 0.121556 Gradient Boosting 0.8390 0.846730 0.153270 XGBoost 0.8569 0.865282 0.134718 LightGBM 0.8540 0.860168 0.139832 Metrica Adicional Error tipo 1 Para la segunda metrica se escogi\u00f3 el error tipo 1 (1-precision o tasa de falsos positivos), que ocurre cuando el modelo predice la clase positiva (nuevo) pero en realidad es negativa (usado). \u00bfPor qu\u00e9 es importante? En el contexto de Mercado Libre, lo m\u00e1s importante es garantizar una excelente experiencia para los usuarios al momento de realizar una compra. Un error cr\u00edtico ser\u00eda clasificar un producto como nuevo cuando en realidad es usado, generando al final posible frustraci\u00f3n, p\u00e9rdida de confianza y reclamos por parte del comprador. Este tipo de error corresponde a un falso positivo (Error Tipo I), donde el modelo predice que el art\u00edculo es nuevo pero en realidad no lo es. Para minimizar este riesgo, es fundamental no solo enfocarse en la exactitud general del modelo, sino tambi\u00e9n en que esta tasa sea m\u00ednima. Aunque el error tipo 1 es minimo en el modelo de Random Forest, si se compara con el modelo XGBoost la diferencia es poca; y este \u00faltimo presenta un mejor Accuracy. Se recomienda escoger el modelo XGBoost y continuar probando mejores variables e ir iterarando en los datos en el tiempo.","title":"Metricas"},{"location":"metricas/#metricas","text":"","title":"Metricas"},{"location":"metricas/#metrica-inicial","text":"","title":"M\u00e9trica inicial"},{"location":"metricas/#accuracy","text":"Para el desarrollo del ejercicio se propuso trabajar con el Accuracy y alcanzar un minimo de 0.86. Las siguientes fueron las m\u00e9tricas calculadas con los modelos iniciales Modelo Accuracy Precision Error tipo 1 Logistic Regression 0.7864 0.754514 0.245486 Random Forest 0.8467 0.878444 0.121556 Gradient Boosting 0.8390 0.846730 0.153270 XGBoost 0.8569 0.865282 0.134718 LightGBM 0.8540 0.860168 0.139832","title":"Accuracy"},{"location":"metricas/#metrica-adicional","text":"","title":"Metrica Adicional"},{"location":"metricas/#error-tipo-1","text":"Para la segunda metrica se escogi\u00f3 el error tipo 1 (1-precision o tasa de falsos positivos), que ocurre cuando el modelo predice la clase positiva (nuevo) pero en realidad es negativa (usado).","title":"Error tipo 1"},{"location":"metricas/#por-que-es-importante","text":"En el contexto de Mercado Libre, lo m\u00e1s importante es garantizar una excelente experiencia para los usuarios al momento de realizar una compra. Un error cr\u00edtico ser\u00eda clasificar un producto como nuevo cuando en realidad es usado, generando al final posible frustraci\u00f3n, p\u00e9rdida de confianza y reclamos por parte del comprador. Este tipo de error corresponde a un falso positivo (Error Tipo I), donde el modelo predice que el art\u00edculo es nuevo pero en realidad no lo es. Para minimizar este riesgo, es fundamental no solo enfocarse en la exactitud general del modelo, sino tambi\u00e9n en que esta tasa sea m\u00ednima. Aunque el error tipo 1 es minimo en el modelo de Random Forest, si se compara con el modelo XGBoost la diferencia es poca; y este \u00faltimo presenta un mejor Accuracy. Se recomienda escoger el modelo XGBoost y continuar probando mejores variables e ir iterarando en los datos en el tiempo.","title":"\u00bfPor qu\u00e9 es importante?"},{"location":"modelo/","text":"","title":"Modelo"},{"location":"patron/","text":"Patr\u00f3n de dise\u00f1o Construir proyectos de Machine Learning (ML) en base a patrones de dise\u00f1o es una pr\u00e1ctica fundamental para lograr reutilizaci\u00f3n, estandarizaci\u00f3n, legibilidad, mantenibilidad y eficiencia en el desarrollo de soluciones. Los patrones de dise\u00f1o son soluciones probadas y documentadas a problemas comunes en ingenier\u00eda de software, y su aplicaci\u00f3n en proyectos de ML ofrece m\u00faltiples beneficios Por lo anterior se us\u00f3 un patr\u00f3n de dise\u00f1o llamado Pipeline de procesamiento Prop\u00f3sito: Organizar el flujo de transformaci\u00f3n de datos (limpieza, extracci\u00f3n de caracter\u00edsticas, normalizaci\u00f3n) Caso de uso: DataLoader(): Cargar los datos DataCleaner(): Realiza limpieza de datos Feature Engineer(): Crea nuevas variables y se seleccionan las variables finales DatasetBuilder(): Toma las clases DataLoader, DataCleaner y FeatureEnngineer para crear los datos de entrenamiento y prueba ModelTrainer(): Entrena el modelo, realiza ajuste de hiperparametros, grafica la importancia de las variables y exporta el modelo. EDA(): : Crea descriptivas y graficas basicas exploratorias","title":"Patr\u00f3n Arquitectonico"},{"location":"patron/#patron-de-diseno","text":"Construir proyectos de Machine Learning (ML) en base a patrones de dise\u00f1o es una pr\u00e1ctica fundamental para lograr reutilizaci\u00f3n, estandarizaci\u00f3n, legibilidad, mantenibilidad y eficiencia en el desarrollo de soluciones. Los patrones de dise\u00f1o son soluciones probadas y documentadas a problemas comunes en ingenier\u00eda de software, y su aplicaci\u00f3n en proyectos de ML ofrece m\u00faltiples beneficios Por lo anterior se us\u00f3 un patr\u00f3n de dise\u00f1o llamado Pipeline de procesamiento Prop\u00f3sito: Organizar el flujo de transformaci\u00f3n de datos (limpieza, extracci\u00f3n de caracter\u00edsticas, normalizaci\u00f3n) Caso de uso: DataLoader(): Cargar los datos DataCleaner(): Realiza limpieza de datos Feature Engineer(): Crea nuevas variables y se seleccionan las variables finales DatasetBuilder(): Toma las clases DataLoader, DataCleaner y FeatureEnngineer para crear los datos de entrenamiento y prueba ModelTrainer(): Entrena el modelo, realiza ajuste de hiperparametros, grafica la importancia de las variables y exporta el modelo. EDA(): : Crea descriptivas y graficas basicas exploratorias","title":"Patr\u00f3n de dise\u00f1o"}]}